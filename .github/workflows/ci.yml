name: CI Build

on:
  push:
    branches: [ actions_tests ]
  pull_request:
    branches: [ master ]

jobs:
  mac_build:
    if: ${{ false }}
    runs-on: macOS-11.0
    name: macOS 11 Big Sur Build
    env:
      QTDIR: /usr/local/opt/qt
      BINDIR: Software/bin
    steps:
      - name: Checkout Source
        uses: actions/checkout@v2
      - name: Pre-build setup
        run: |
          set -x
          brew update
          brew install qt5
          $QTDIR/bin/qmake -v
          clang -v
          gcc -v
          sysctl machdep.cpu
      - name: Build
        run: |
          export PATH=$QTDIR/bin:$PATH
          export VERSION=`cat Software/VERSION`
          cd Software
          ./update_locales.sh
          qmake -r
          make
      - name: Package DMG
        run: $QTDIR/bin/macdeployqt $BINDIR/Prismatik.app -dmg
      - name: Check DMG
        env:
          ATTACHOUT: ${{ runner.temp }}/attach
        run: |
          set -x
          cd $BINDIR
          ls
          hdiutil attach Prismatik.dmg > $ATTACHOUT
          cat $ATTACHOUT
          VOLUME=`cat $ATTACHOUT | grep -oE '/Volumes/[^[:space:]]+'`
          [ -e "$VOLUME" ]
          ls $VOLUME/Prismatik.app
          otool -L $VOLUME/Prismatik.app/Contents/MacOS/Prismatik
          otool -L $VOLUME/Prismatik.app/Contents/Frameworks/QtWidgets.framework/Versions/5/QtWidgets
          hdiutil detach $VOLUME
      - name: Upload DMG
        uses: actions/upload-artifact@v2
        with:
          name: Prismatik.dmg
          path: ${{ env.BINDIR }}/Prismatik.dmg

  pacman_build:
    if: ${{ false }}
    runs-on: ubuntu-20.04
    name: Arch Linux / pacman Build
    steps:
      - name: Checkout Source
        uses: actions/checkout@v2
      - name: Image Build
        run: ./Software/dist_linux/docker/build-image.sh archlinux latest pacman
      - name: Build
        run: ./Software/dist_linux/docker/run-image.sh archlinux latest pacman
      - name: Check Package
        run: |
          PKG_PATH=$(ls Software/dist_linux/prismatik*.pkg*)
          namcap $PKG_PATH
          echo "PKG_PATH=$PKG_PATH" >> $GITHUB_ENV
          echo "PKG_NAME=$(basename $PKG_PATH)" >> $GITHUB_ENV
      - name: Upload Package
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.PKG_NAME }}
          path: ${{ env.PKG_PATH }}
  dpkg_build:
    if: ${{ false }}
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        os: [ 'ubuntu 20.10', 'ubuntu 20.04', 'ubuntu 18.04', 'debian 10.6' ]
    name: ${{ matrix.os }} / dpkg Build
    steps:
      - name: Checkout Source
        uses: actions/checkout@v2
      - name: Image Build
        run: ./Software/dist_linux/docker/build-image.sh ${{ matrix.os }} dpkg
      - name: Build
        run: ./Software/dist_linux/docker/run-image.sh ${{ matrix.os }} dpkg
      - name: Check Package
        run: |
          PKG_PATH=$(ls Software/dist_linux/prismatik*.deb)
          echo "PKG_PATH=$PKG_PATH" >> $GITHUB_ENV
          echo "PKG_NAME=$(basename $PKG_PATH | sed 's#amd64#${{ matrix.os }}_amd64#; s# ##')" >> $GITHUB_ENV
      - name: Upload Package
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.PKG_NAME }}
          path: ${{ env.PKG_PATH }}
  win_build:
    runs-on: windows-2019
    name: Windows 2019 Build
    steps:
      - name: Checkout Source
        uses: actions/checkout@v2
      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          version: 5.15.1
      - name: Enable DEV CMD
        uses: ilammy/msvc-dev-cmd@v1
      - name: Build
        shell: bash
        run: |
          echo "QTDIR=$Qt5_Dir" >> $GITHUB_ENV
          set -xe
          cd Software
          cat << EOF > build-vars.prf
          win32: {
            OPENSSL_DIR = "C:\\\\Program Files\\\\OpenSSL\\\\bin"
            TARGET_ARCH = x86_64
          }
          EOF
          cat build-vars.prf
          ./update_locales.sh
          ./scripts/win32/generate_sln.sh
          MSBuild.exe /p:Configuration=Release /p:Platform=x64
