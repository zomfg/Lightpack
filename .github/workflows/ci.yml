name: CI Build

on:
  push:
    branches: [ actions_tests ]
  pull_request:
    branches: [ master ]

jobs:
  mac_build:
    runs-on: macOS-11.0
    name: macOS 11 Big Sur Build
    env:
      QTDIR: /usr/local/opt/qt
      BINDIR: Software/bin
    steps:
      - name: Checkout Source
        uses: actions/checkout@v2
      - name: Pre-build setup
        run: |
          set -x
          brew update
          brew install qt5
          $QTDIR/bin/qmake -v
          clang -v
          gcc -v
          sysctl machdep.cpu
      - name: Build
        run: |
          export PATH=$QTDIR/bin:$PATH
          export VERSION=`cat Software/VERSION`
          cd Software
          ./update_locales.sh
          qmake -r
          make
      - name: Package DMG
        run: $QTDIR/bin/macdeployqt $BINDIR/Prismatik.app -dmg
      - name: Check DMG
        env:
          ATTACHOUT: ${{ runner.temp }}/attach
        run: |
          set -x
          cd $BINDIR
          ls
          hdiutil attach Prismatik.dmg > $ATTACHOUT
          cat $ATTACHOUT
          VOLUME=`cat $ATTACHOUT | grep -oE '/Volumes/[^[:space:]]+'`
          [ -e "$VOLUME" ]
          ls $VOLUME/Prismatik.app
          otool -L $VOLUME/Prismatik.app/Contents/MacOS/Prismatik
          otool -L $VOLUME/Prismatik.app/Contents/Frameworks/QtWidgets.framework/Versions/5/QtWidgets
          hdiutil detach $VOLUME
      - name: Upload DMG
        uses: actions/upload-artifact@v2.2.0
        with:
          name: Prismatik.dmg
          path: ${{ env.BINDIR }}/Prismatik.dmg

  pacman_build:
    if: ${{ false }}
    runs-on: ubuntu-20.04
    name: Arch Linux / pacman Build
    steps:
      - name: Checkout Source
        uses: actions/checkout@v2
      - name: Image Build
        run: ./Software/dist_linux/docker/build-image.sh archlinux latest pacman
      - name: Build
        run: ./Software/dist_linux/docker/run-image.sh archlinux latest pacman
      - name: Check Package
        run: |
          PKG_PATH=$(ls Software/dist_linux/prismatik*.pkg*)
          namcap $PKG_PATH
          echo "PKG_PATH=$PKG_PATH" >> $GITHUB_ENV
          echo "PKG_NAME=$(basename $PKG_PATH)" >> $GITHUB_ENV
      - name: Upload Package
        uses: actions/upload-artifact@v2.2.0
        with:
          name: ${{ env.PKG_NAME }}
          path: ${{ env.PKG_PATH }}

  ubuntu2010_build:
    runs-on: ubuntu-20.04
    name: Ubuntu 20.10 / dpkg Build
    steps:
      - name: Checkout Source
        uses: actions/checkout@v2
      - name: Image Build
        run: ./Software/dist_linux/docker/build-image.sh ubuntu 20.10 dpkg
      - name: Build
        run: ./Software/dist_linux/docker/run-image.sh ubuntu 20.10 dpkg
      - name: Check Package
        run: |
          PKG_PATH=$(ls Software/dist_linux/prismatik*.deb)
          echo "PKG_PATH=$PKG_PATH" >> $GITHUB_ENV
          echo "PKG_NAME=$(basename $PKG_PATH | sed 's#amd64#ubuntu2010_amd64#')" >> $GITHUB_ENV
      - name: Upload Package
        uses: actions/upload-artifact@v2.2.0
        with:
          name: ${{ env.PKG_NAME }}
          path: ${{ env.PKG_PATH }}
  ubuntu2004_build:
    runs-on: ubuntu-20.04
    name: Ubuntu 20.04 / dpkg Build
    steps:
      - name: Checkout Source
        uses: actions/checkout@v2
      - name: Image Build
        run: ./Software/dist_linux/docker/build-image.sh ubuntu 20.04 dpkg
      - name: Build
        run: ./Software/dist_linux/docker/run-image.sh ubuntu 20.04 dpkg
      - name: Check Package
        run: |
          PKG_PATH=$(ls Software/dist_linux/prismatik*.deb)
          echo "PKG_PATH=$PKG_PATH" >> $GITHUB_ENV
          echo "PKG_NAME=$(basename $PKG_PATH | sed 's#amd64#ubuntu2004_amd64#')" >> $GITHUB_ENV
      - name: Upload Package
        uses: actions/upload-artifact@v2.2.0
        with:
          name: ${{ env.PKG_NAME }}
          path: ${{ env.PKG_PATH }}
  ubuntu1804_build:
    runs-on: ubuntu-20.04
    name: Ubuntu 18.04 / dpkg Build
    steps:
      - name: Checkout Source
        uses: actions/checkout@v2
      - name: Image Build
        run: ./Software/dist_linux/docker/build-image.sh ubuntu 18.04 dpkg
      - name: Build
        run: ./Software/dist_linux/docker/run-image.sh ubuntu 18.04 dpkg
      - name: Check Package
        run: |
          PKG_PATH=$(ls Software/dist_linux/prismatik*.deb)
          echo "PKG_PATH=$PKG_PATH" >> $GITHUB_ENV
          echo "PKG_NAME=$(basename $PKG_PATH | sed 's#amd64#ubuntu1804_amd64#')" >> $GITHUB_ENV
      - name: Upload Package
        uses: actions/upload-artifact@v2.2.0
        with:
          name: ${{ env.PKG_NAME }}
          path: ${{ env.PKG_PATH }}
  debian106_build:
    runs-on: ubuntu-20.04
    name: Debian 10.6 / dpkg Build
    steps:
      - name: Checkout Source
        uses: actions/checkout@v2
      - name: Image Build
        run: ./Software/dist_linux/docker/build-image.sh debian 10.6 dpkg
      - name: Build
        run: ./Software/dist_linux/docker/run-image.sh debian 10.6 dpkg
      - name: Check Package
        run: |
          PKG_PATH=$(ls Software/dist_linux/prismatik*.deb)
          echo "PKG_PATH=$PKG_PATH" >> $GITHUB_ENV
          echo "PKG_NAME=$(basename $PKG_PATH | sed 's#amd64#debian106_amd64#')" >> $GITHUB_ENV
      - name: Upload Package
        uses: actions/upload-artifact@v2.2.0
        with:
          name: ${{ env.PKG_NAME }}
          path: ${{ env.PKG_PATH }}
