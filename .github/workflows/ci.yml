name: CI Build

on:
  push:
    branches: [ actions_tests ]
  pull_request:
    branches: [ master ]

jobs:
  mac_build:
    if: ${{ false }}
    runs-on: macOS-11.0
    name: macOS 11 Big Sur Build
    env:
      QTDIR: /usr/local/opt/qt
      BINDIR: Software/bin
    steps:
      - name: check xcode
        run: |
          set -xe
          sw_vers
          uname -a
          xcode-select -v
          xcode-select -p
          xcodebuild -version
          xcodebuild -showsdks
          ls -l /Applications/
      # - name: Checkout Source
      #   uses: actions/checkout@v2
      # - name: Pre-build setup
      #   run: |
      #     set -xe
      #     brew update
      #     brew install qt5
      #     $QTDIR/bin/qmake -v
      #     clang -v
      #     gcc -v
      #     sysctl machdep.cpu
      # - name: Build
      #   run: |
      #     set -xe
      #     export PATH=$QTDIR/bin:$PATH
      #     export VERSION=`cat Software/VERSION`
      #     cd Software
      #     ./update_locales.sh
      #     qmake -r
      #     make
      # - name: Package DMG
      #   run: $QTDIR/bin/macdeployqt $BINDIR/Prismatik.app -dmg
      # - name: Check DMG
      #   working-directory: ${{ env.BINDIR }}
      #   env:
      #     ATTACHOUT: ${{ runner.temp }}/attach
      #   run: |
      #     set -xe
      #     ls
      #     hdiutil attach Prismatik.dmg > $ATTACHOUT
      #     cat $ATTACHOUT
      #     VOLUME=`cat $ATTACHOUT | grep -oE '/Volumes/[^[:space:]]+'`
      #     [ -e "$VOLUME" ]
      #     ls $VOLUME/Prismatik.app
      #     otool -L $VOLUME/Prismatik.app/Contents/MacOS/Prismatik
      #     otool -L $VOLUME/Prismatik.app/Contents/Frameworks/QtWidgets.framework/Versions/5/QtWidgets
      #     hdiutil detach $VOLUME
      # - name: Upload DMG
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: Prismatik.dmg
      #     path: ${{ env.BINDIR }}/Prismatik.dmg






  pacman_build:
    if: ${{ false }}
    runs-on: ubuntu-20.04
    name: Arch Linux / pacman Build
    steps:
      - name: Checkout Source
        uses: actions/checkout@v2
      - name: Image Build
        run: ./Software/dist_linux/docker/build-image.sh archlinux latest pacman
      - name: Build
        run: ./Software/dist_linux/docker/run-image.sh archlinux latest pacman
      - name: Check Package
        run: |
          set -xe
          PKG_PATH=$(ls Software/dist_linux/prismatik*.pkg*)
          namcap $PKG_PATH
          echo "PKG_PATH=$PKG_PATH" >> $GITHUB_ENV
          echo "PKG_NAME=$(basename $PKG_PATH)" >> $GITHUB_ENV
      - name: Upload Package
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.PKG_NAME }}
          path: ${{ env.PKG_PATH }}




  dpkg_build:
    if: ${{ false }}
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        os: [ 'ubuntu 20.10', 'ubuntu 20.04', 'ubuntu 18.04', 'debian 10.6' ]
    name: ${{ matrix.os }} / dpkg Build
    steps:
      - name: Checkout Source
        uses: actions/checkout@v2
      - name: Image Build
        run: ./Software/dist_linux/docker/build-image.sh ${{ matrix.os }} dpkg
      - name: Build
        run: ./Software/dist_linux/docker/run-image.sh ${{ matrix.os }} dpkg
      - name: Check Package
        run: |
          set -xe
          PKG_PATH=$(ls Software/dist_linux/prismatik*.deb)
          echo "PKG_PATH=$PKG_PATH" >> $GITHUB_ENV
          echo "PKG_NAME=$(basename $PKG_PATH | sed 's#amd64#${{ matrix.os }}_amd64#; s# ##')" >> $GITHUB_ENV
      - name: Upload Package
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.PKG_NAME }}
          path: ${{ env.PKG_PATH }}






  win_build:
    # if: ${{ false }}
    runs-on: windows-2019
    name: Windows 2019 Build
    defaults:
      run:
        shell: bash
    env:
      BASSDIR: bass
      WASAPIDIR: bass/wasapi
      NLLDIR: nll
    steps:
      - name: Checkout Source
        uses: actions/checkout@v2
      - name: Install BASS / WASAPI
        run: |
          set -xe
          mkdir "$BASSDIR"
          cd "$BASSDIR"
          curl -fSL http://uk.un4seen.com/files/bass24.zip > _bass.zip
          unzip _bass.zip
          cd -
          mkdir -p "$WASAPIDIR"
          cd "$WASAPIDIR"
          curl -fSL http://uk.un4seen.com/files/basswasapi24.zip > _wasapi.zip
          unzip _wasapi.zip
      - name: Download NightLightLibrary
        id: dl-nll
        uses: robinraju/release-downloader@v1
        with:
          repository: zomfg/NightLightLibrary
          tag: v1.3
          fileName: NightLightLibrary-x64-1.3-win1909preview.zip
          out-file-path: ${{ env.NLLDIR }}
      - name: Unzip NightLightLibrary
        working-directory: ${{ env.NLLDIR }}
        run: unzip NightLightLibrary-x64-1.3-win1909preview.zip
      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          version: 5.15.1
      - name: Enable DEV env
        uses: ilammy/msvc-dev-cmd@v1
      - name: Build
        working-directory: Software
        run: |
          set -xe
          echo "QTDIR=$Qt5_Dir" >> $GITHUB_ENV
          cat << EOF > build-vars.prf
          win32: {
            OPENSSL_DIR = "C:/Program Files/OpenSSL/bin"
            DEFINES += BASS_SOUND_SUPPORT
            BASS_DIR = "../../$BASSDIR"
            BASSWASAPI_DIR = "../../$WASAPIDIR"
            DEFINES += NIGHTLIGHT_SUPPORT
            NIGHTLIGHT_DIR = "../../$NLLDIR"
            TARGET_ARCH = x86_64
          }
          EOF
          cat build-vars.prf
          ./update_locales.sh
          ./scripts/win32/generate_sln.sh
          echo "MSBuild.exe /p:Configuration=Release /p:Platform=x64" > _msb.bat
          ./_msb.bat
      - name: Package
        working-directory: Software
        run: |
          set -xe
          grep -vF UpdateElevate scripts/win32/prepare_installer.sh | sh -sex
          cd dist_windows
          grep -vF UpdateElevate script.iss > _script_noupdate.iss
          "C:/Program Files (x86)/Inno Setup 6/ISCC.exe" _script_noupdate.iss
      - name: Check Package
        run: |
          set -xe
          PKG_PATH=$(ls Software/dist_windows/Output/Prismatik*.exe)
          PKG_NAME=$(basename "$PKG_PATH")
          echo "PKG_PATH=$PKG_PATH" >> $GITHUB_ENV
          echo "PKG_NAME=$PKG_NAME" >> $GITHUB_ENV
      - name: Upload Package
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.PKG_NAME }}
          path: ${{ env.PKG_PATH }}
